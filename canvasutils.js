// Generated by CoffeeScript 1.3.3
/*
EN : Utiliy functions for html5 canvas
FR : Fonctions utilitaires pour html5 canvas
*/

var CanvasUtils;

CanvasUtils = CanvasUtils || {};

(function(s) {
  s.keys = {
    /* EN : key mapping
    */

    UP: 38,
    DOWN: 40,
    LEFT: 37,
    RIGHT: 39
  };
  s.captureMouse = function(element) {
    /* EN : CAPTURE MOUSE POSITION ON AN ELEMENT 
        FR : CAPTURE LA POSITION DE LA SOURIS SUR UN ELEMENT
    */

    var mouse;
    mouse = {
      x: 0,
      y: 0
    };
    element.addEventListener('mousemove', function(event) {
      var x, y;
      x = event.pageX || (event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft);
      y = event.pageY || (event.clientY + document.body.scrollTop + document.documentElement.scrollTop);
      x -= event.target.offsetLeft;
      y -= event.target.offsetTop;
      mouse.x = x;
      mouse.y = y;
    }, false);
    return mouse;
  };
  s.uncaptureMouse = function(element) {
    /* EN : STOP CAPTURE 
        FR : ARRETE LA CAPTURE DE LA SOURIS SUR UN ELEMENT
    */
    element.removeEventListener('mousemove', this.captureMouse);
  };
  s.parseColor = function(color, toNumber) {
    if (toNumber == null) {
      toNumber = false;
    }
    /* EN : READ AND TRANSFORM color string 
        FR : TRANSFORME LE FORMANT d'une Couleur
    */

    if (toNumber === true) {
      if (typeof color === "number") {
        return color | 0;
      }
      if (typeof color === "string" && color[0] === "#") {
        color = color.slice(1);
      }
      return parseInt(color, 16);
    } else {
      if (typeof color === 'number') {
        color = "#" + ('00000' + (color | 0).toString(16)).substr(-6);
      }
      return color;
    }
  };
  s.colorToRGB = function(color, alpha) {
    var a, b, g, r;
    if (alpha == null) {
      alpha = 1;
    }
    if (typeof color === "string" && (color[0] = "#")) {
      color = parseInt(color.slice(1), 16);
    }
    r = color >> 16 & 0xff;
    g = color >> 8 & 0xff;
    b = color & 0xff;
    a = alpha < 0 ? 0 : (alpha > 1 ? 1 : alpha);
    if (a === 1) {
      return "rgb(" + r + "," + g + "," + b + ")";
    } else {
      return "rgba(" + r + "," + g + "," + b + "," + a + ")";
    }
  };
  s.containsPoint = function(rect, x, y) {
    /* EN : Return true if a points is contains in a rectangle 
        FR : Retourne vrai si un point est contenu dans un rectangle
    */
    return !(x < rect.x || x > rect.x + rect.width || y < rect.y || y > rect.y + rect.height);
  };
})(CanvasUtils);
